memory.limit()
target=read.csv("C:/yohannes/target.csv", stringsAsFactors = FALSE)
g=ggplot(data=target,aes(TARGET_ARPU_CHANGE))
library(ggplot2)
g=ggplot(data=target,aes(TARGET_ARPU_CHANGE))
g+geom_boxplot()
boxplot(ggplot2)
boxplot(target$TARGET_ARPU_CHANGE)
g=ggplot(data=target,aes(x=TARGET_ARPU_CHANGE))
g+geom_boxplot()
boxplot(target$TARGET_ARPU_CHANGE)
g=ggplot(data=target,aes(x=TARGET_ARPU_CHANGE,y=TARGET_ARPU_CHANGE))
g+geom_boxplot()
boxplot(target$TARGET_ARPU_CHANGE)
g+geom_jitter()
g=ggplot(data=target,aes(TARGET_ARPU_CHANGE))
g+geom_jitter()
g=ggplot(data=target,aes(=TARGET_ARPU_CHANGE))
g=ggplot(data=target,aes(y=TARGET_ARPU_CHANGE))
g+geom_jitter()
boxplot(target$TARGET_ARPU_CHANGE)
ggplot2.boxplot(target$TARGET_ARPU_CHANGE)
ggplot(target,y=TARGET_ARPU_CHANGE)+geom_boxplot(aes(x=factor(1)))
ggplot(target,aes(y=TARGET_ARPU_CHANGE)+geom_boxplot(aes(x=factor(1)))
ggplot(target,aes(y=TARGET_ARPU_CHANGE))+geom_boxplot(aes(x=factor(1)))
ggplot(target,aes(y=TARGET_ARPU_CHANGE))
g+geom_boxplot(aes(x=factor(1)))
p+geom_jitter()
p=g+geom_boxplot(aes(x=factor(1)))
p+geom_jitter()
boxplot(target$TARGET_ARPU_CHANGE)
g+geom_boxplot(aes(x=factor(1),fill="red"))
p=g+geom_boxplot(aes(x=factor(1,fill="red")))
p
p=g+geom_boxplot(fill="red"))
p=g+geom_boxplot(fill="red")
p
g=ggplot(target,aes(y=TARGET_ARPU_CHANGE))
p=g+geom_boxplot()
p
p=g+geom_boxplot(aes(x=factor(1)))
p
p+geom_jitter()
p+geom_jitter(x=factor(1))
boxplot(target$TARGET_ARPU_CHANGE)
png('C:/Yohannestest.png')
boxplot(target$TARGET_ARPU_CHANGE)
dev.off()
png('C:/Yohannes/test.png')
boxplot(target$TARGET_ARPU_CHANGE)
dev.off()
boxplot(target$TARGET_ARPU_CHANGE)
boxplot(target$TARGET_ARPU_CHANGE, width = 5)
boxplot(target$TARGET_ARPU_CHANGE, width = 10)
boxplot(target$TARGET_ARPU_CHANGE, width = 2)
boxplot(target$TARGET_ARPU_CHANGE, width = 2)
boxplot(target$TARGET_ARPU_CHANGE, width = 2,  varwidth = 4)
boxplot(target$TARGET_ARPU_CHANGE, width = 2,  varwidth = 10)
g=ggplot(target,aes(TARGET_ARPU_CHANGE))
g+geom_density()
pdf('C:/Yohannes/test.pfd')
boxplot(target$TARGET_ARPU_CHANGE, width = 2,  varwidth = 10)
dev.off()
png('C:/Yohannes/test.pfd')
boxplot(target$TARGET_ARPU_CHANGE, width = 2,  varwidth = 10)
dev.off()
png('C:/Yohannes/test.pdf')
boxplot(target$TARGET_ARPU_CHANGE, width = 2,  varwidth = 10)
dev.off()
pdf('C:/Yohannes/test.pdf')
boxplot(target$TARGET_ARPU_CHANGE, width = 2,  varwidth = 10)
dev.off()
g=ggplot(target,aes(y=TARGET_ARPU_CHANGE))
p=g+geom_boxplot(aes(outlier.color="red"))
g+geom_density()
g=ggplot(target,aes(TARGET_ARPU_CHANGE))
g+geom_density()
g+his()
g+hist()
g+hist()
g+histogram()
g+geom_histogram()
g+geom_histogram(binwidth=10)
g+geom_histogram(binwidth=100)
g+geom_histogram(binwidth=10000)
g+geom_histogram(binwidth=10)
g+geom_histogram(binwidth=100)
g=ggplot(target,aes(y=TARGET_ARPU_CHANGE))
p=g+geom_boxplot(aes(x=factor(1)))
g=ggplot(target,aes(y=TARGET_ARPU_CHANGE))
p=g+geom_boxplot(aes(x=factor(1)))
g=ggplot(target,aes(y=TARGET_ARPU_CHANGE))
p=g+geom_boxplot(aes(x=factor(1)))
p=g+geom_boxplot()
g=ggplot(target,aes(y=TARGET_ARPU_CHANGE))
p=g+geom_boxplot()
h=ggplot(target,aes(y=TARGET_ARPU_CHANGE))
p=h+geom_boxplot()
h+geom_boxplot()
g+geom_boxplot(aes(x=factor(1)))
p=g+geom_boxplot(aes(x=factor(0)))
p
p=g+geom_boxplot(aes(x=TARGET_ARPU_CHANGE))
p
g=ggplot(target,aes(y=""))
p=g+geom_boxplot(aes(x=TARGET_ARPU_CHANGE))
p
g=ggplot(target,aes(y="TARGET_ARPU_CHANGE"))
p=g+geom_boxplot(aes(x=TARGET_ARPU_CHANGE))
p
g=ggplot(target,aes(y="TARGET_ARPU_CHANGE"))
p=g+geom_boxplot(aes(x=TARGET_ARPU_CHANGE))
p
p=g+geom_boxplot(aes(x=factor(0)))
p
g=ggplot(target,aes(y=TARGET_ARPU_CHANGE))
p=g+geom_boxplot(aes(x=factor(0)))
p
p+ylab("")
g=ggplot(target,aes(y=TARGET_ARPU_CHANGE))
p=g+geom_boxplot(aes(x=TARGET_ARPU_CHANGE))
p+ylab("")
means_exponentials <- apply(Expo_simulation, 2, mean)
means_exponentials
dir
dir()
browseURL("Assig_Statistical_Inference")
browseURL("Assig_Statistical_Inference.RMD")
browseURL("Assig_Statistical_Inference.html")
browseURL(Assig_Statistical_Inference.html)
browseURL("Assig_Statistical_Inference.html")
install.packages("rmarkdown")
render("Assig Statistical Inference.Rmd")
library(rebder)
library(render)
install.packages("pandor")
install.packages("pandoc")
install.packages("rebder")
install.packages("render")
pandoc("Assig Statistical Inference.Rmd",format="PFD")
pandoc("Assig Statistical Inference.Rmd",format="PDF")
library(knitr)
pandoc("Assig Statistical Inference.Rmd",format="PDF")
render("Assig Statistical Inference.Rmd")
library(rmarkdown)
render("Assig Statistical Inference.Rmd")
render("C:vYohannes/Coursera/statistical inference/Week 4/Course Assignment/Assig Statistical Inference.Rmd")
render("C:/Yohannes/Coursera/statistical inference/Week 4/Course Assignment/Assig Statistical Inference.Rmd")
setwd()
dir
dir()
getwd()
render("C:/Yohannes/Coursera/statistical inference/Week 4/Course Assignment/Assig Statistical Inference.Rmd")
render("C:/Yohannes/Coursera/statistical inference/Week 4/Course Assignment/Assig Statistical Inference.pdf")
render(input="C:/Yohannes/Coursera/statistical inference/Week 4/Course Assignment/Assig Statistical Inference.Rmd",output_format = "pdf_document",output_file = ="C:/Yohannes/Coursera/statistical inference/Week 4/Course Assignment/Assig Statistical Inference.Rmd.pdf")
render(input="C:/Yohannes/Coursera/statistical inference/Week 4/Course Assignment/Assig Statistical Inference.Rmd",output_format = "pdf_document",output_file ="C:/Yohannes/Coursera/statistical inference/Week 4/Course Assignment/Assig Statistical Inference.Rmd.pdf")
render(input="C:/Yohannes/Coursera/statistical inference/Week 4/Course Assignment/Assig Statistical Inference.Rmd",output_format = "pdf_document",output_file ="C:/Yohannes/Coursera/statistical inference/Week 4/Course Assignment/Assig Statistical Inference.Rmd.pdf")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
head(x)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
Data=cbind(x,y)
head(data)
head(data)
head(data)
Data=cbind(x,y)
Data
lm(y~x, data=data)
lm(y~x data=data)
lm(y~x, data=data)
str(data)
str(data)
head(data)
head(data)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
Data=cbind(x,y)
head(data)
Data
head(data)
install.packages("GGally")
require(GGally)
require(ggplot2)
pairs(mtcars)
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
head(mtcars)
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
ggpairs(mtcars[mpg,disp,hp,drat,wt,qsec]), lower = list(continuous = my_fn))
ggpairs(mtcars[1:7]), lower = list(continuous = my_fn))
ggpairs(mtcars[mpg,disp,hp,drat,wt,qsec], lower = list(continuous = my_fn))
names(mtcars)
ggpairs(mtcars[1:7], lower = list(continuous = my_fn))
library(dplyr)
mtcars2=sapply(x,is.numeric)
mtcars2=sapply(mtcars,is.numeric)
ggpairs(mtcars2, lower = list(continuous = my_fn))
head(mtcars)
head(mtcars2)
mtcars2=mtcars[,mtcars2]
head(mtcars2)
mtcars2=sapply(mtcars,is.numeric)
mtcars2=mtcars[,mtcars2]
head(mtcars2)
cols=c("cyl","vs","am","gear","carb")
mtcars[,cols] <- data.frame(apply(mtcars[cols], 2, as.factor))
str(mtcars)
mtcars2=sapply(mtcars,is.numeric)
mtcars2=mtcars[,mtcars2]
head(mtcars2)
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
ggpairs(mtcars2, lower = list(continuous = my_fn))
install.packages("ggpairs")
install.packages("GGally")
library(GGally)
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
ggpairs(mtcars2, lower = list(continuous = my_fn))
library(GGally)
library(GGally)
ggpairs(mtcars2, lower = list(continuous = my_fn))
head(mtcars)
str(mtcars)
fit1=lm(mpg~.,data=mtcars)
fit1
summary(fit1)
plot(fit1)
par(mfrow=c(2,2))
plot(fit1)
names(mtcars)
```
fit2=lm(mpg~cyl+dis+I(disp^2)+hp+I(hp^2)+drat+I(drat^2)+wt+I(wt^2)+qsec+I(qsec^2)+vs+am+gear+carb,data=mtcars)
fit2=lm(mpg~cyl+disp+I(disp^2)+hp+I(hp^2)+drat+I(drat^2)+wt+I(wt^2)+qsec+I(qsec^2)+vs+am+gear+carb,data=mtcars)
fit2
anova(fit1,fit2)
plot(fit2)
plot(fit2)
par(mfrow=c(2,2))
plot(fit2)
plot(fit1)
fit3=lm(mpg~cyl+disp+I(disp^3)+hp+I(hp^3)+drat+I(drat^3)+wt+I(wt^3)+qsec+I(qsec^3)+vs+am+gear+carb,data=mtcars)
anova(fit1,fit2,fit2)
anova(fit1,fit2,fit3)
anova(fit2,fit3)
anova(fit2,fit3)
anova(fit1,fit2)
fit3=lm(mpg~cyl+log(disp)+log(hp)+log(drat)+log(wt)+log(qsec)+vs+am+gear+carb,data=mtcars)
fit3
anova(fit1,fit2.fit3)
fit3=lm(mpg~cyl+log(disp)+log(hp)+log(drat)+log(wt)+log(qsec)+vs+am+gear+carb,data=mtcars)
anova(fit1,fit2,fit3)
anova(fit1,fit2)
anova(fit1,fit3)
anova(fit1,fit3)
plot(fit3)
plot(fit2)
fit2=
fit2
fit2
fit1
fit3
fit2
g=ggplot(mtcars,aes(mpg,am),fill=am))
g=ggplot(mtcars,aes(mpg,am),fill=am)
g+geom_point()
g=ggplot(mtcars,aes(am,mpg),fill=am)
g+geom_point()
?mtcars
library(ggplot2)
g=ggplot(mtcars,aes(am,mpg),fill=am)
g+geom_point()
par(mar=c(5.1,4.1,4.1,2.1)
par(mar=c(5.1,4.1,4.1,2.1))
g+geom_point()
par(mar=c(3.1,2.1,2.1,1.1))
g+geom_point()
par(mar=c(0.2,0.2,0.2,0.2))
g+geom_point()
mtcars3=select(mtcars,mpg,am)
ggpairs(mtcars3, lower = list(continuous = my_fn))
g+geom_boxplot()
summary(fit1)
g=ggplot(mtcars,aes(disp,mpg),fill=am)
g+geom_point()+geom_smooth()
g=ggplot(mtcars,aes(hp,mpg),fill=am)
g+geom_point()+geom_smooth()
g=ggplot(mtcars,aes(drat,mpg),fill=am)
g+geom_point()+geom_smooth()
g=ggplot(mtcars,aes(wt,mpg),fill=am)
g+geom_point()+geom_smooth()
g=ggplot(mtcars,aes(qsec,mpg),fill=am)
g+geom_point()+geom_smooth()
anova(fit1,fit2)
anova(fit1,fit3)
head(mtcars)
coef(fit2)
fit4=lm(mpg~cyl+ I(disp^2) +I(hp^2)+ I(drat^2)+ I(wt^2)+q I(qsec^2)+vs+am+gear+carb,data=mtcars)
fit4=lm(mpg~cyl+ I(disp^2) +I(hp^2)+ I(drat^2)+ I(wt^2)+I(qsec^2)+vs+am+gear+carb,data=mtcars)
coef(fit4)
fit3
anova(fit1,fit3)
anova(fit2,fit3)
fit4=lm(mpg~cyl+disp+I(disp^3)+hp+I(hp^3)+drat+I(drat^3)+wt+I(wt^3)+qsec+I(qsec^3)+vs+am+gear+carb,data=mtcars)
anova(fit1,fit4)
anova(fit2,fit4)
coef(fit2)
g+geom_boxplot()
g=ggplot(mtcars,aes(am,mpg),fill=am)
g+geom_boxplot()
old.par <- par(mar = c(0, 0, 0, 0))
par(old.par)
g1=ggplot(mtcars,aes(am,mpg))
g1+geom_boxplot()
g1=ggplot(mtcars,aes(am,mpg))
g1+geom_boxplot()
par(old.par)
g1+geom_boxplot()
shiny::runApp('C:/Yohannes/Coursera/Developing data products/Assignment/Assig')
shiny::runApp('C:/Yohannes/Coursera/Developing data products/Assignment/Assig')
shiny::runApp('C:/Yohannes/Coursera/Developing data products/Assignment/Assig')
shiny::runApp('C:/Yohannes/Coursera/Developing data products/Assignment/Assig')
shiny::runApp('C:/Yohannes/Coursera/Developing data products/Assignment/Assig')
shiny::runApp('C:/Yohannes/Coursera/Developing data products/Assignment/Assig')
shiny::runApp('C:/Yohannes/Coursera/Developing data products/Assignment/Assig')
.libPaths()
getwd()
setwd("C:/Yohannes/Coursera/Developing data products/Assignment/Slidify/first_deck")
slidify(index.html)
library(slidify)
slidify(index.html)
slidify("index.Rmd")
slidify(index.html)
slidify("index.Rmd")
setwd("C:/Yohannes/Coursera/Developing data products/Assignment/Slidify/first_deck")
publish(title = 'My first App', 'index.html', host = 'rpubs')
find.package("RCurl")
library(RCurl)
library(bitops)
publish(title = 'My first App', 'index.html', host = 'rpubs')
library(bdevtools)
library(devtools)
library(devtools)
library(bitops)
publish(title = 'My first App', 'index.html', host = 'rpubs')
publish(title = 'My first App', 'index.html', host = 'rpubs')
publish(title = 'My first App', 'index.html', host =rpubs)
publish(title = 'My first App', index.html, host = 'rpubs')
publish(title = 'My first App', 'index.html', host =rpubs)
publish(title = 'My first App', 'index.html', host =rpubs)
publish(title = 'My first App', 'index.html', host = 'rpubs')
slidify("index.Rmd")
slidify("index.Rmd")
publish(title = 'My first App', 'index.html', host = 'rpubs')
publish(title = 'My first App2', 'index.html', host = 'rpubs')
library(RCurl)
publish(title = 'My first App2', 'index.html', host = 'rpubs')
getwd()
publish(title = 'My first App2', 'index.html', host = 'rpubs')
.libPaths()
library(RCurl)
publish(title = 'My first App3', 'index.html', host = 'rpubs')
setwd("C:/Yohannes/Coursera/Developing data products/Assignment/Slidify/first_deck")
setwd("C:/Yohannes/Coursera/Developing data products/Assignment/Slidify")
publish(title = 'My first App3', 'index.html', host = 'rpubs')
setwd("C:/Yohannes/Coursera/Developing data products/Assignment/Slidify/first_deck")
publish(title = 'My first App3', 'index.html', host = 'rpubs')
publish(title = 'My first App3', 'index.html', host = 'rpubs')
publish(title = 'My first App3;jool', 'index.html', host = 'rpubs')
publish(title = 'My first App3', 'index.html', host = 'rpubs')
publish(title = 'My first App3',host = 'rpubs')
publish(host = 'rpubs')
publish(title = 'My first App3', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'My first App3', 'index.html', host = 'rpubs')
getwd()
publish(title = 'My first App3', 'index.html', host = 'rpubs')
slidify("index.Rmd")
slidify("index.Rmd")
publish(title = 'My first App3', 'index.html', host = 'rpubs')
publish(title = 'My first App3', 'index.html', host = 'rpubs')
publish(title = 'My first App3', 'index.html', host = 'rpubs')
publish(title = 'My first App3', 'index.html', host = 'rpubs')
publish(title = 'My first App3', 'index.html', host = 'rpubs')
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(slidify)
publish(title = 'My first App3', 'index.html', host = 'rpubs')
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify', 'ramnathv')
install_github('ramnathv/slidify', 'ramnathv',force = 'TRUE')
install_github('ramnathv/slidify', 'ramnathv',force = TRUE)
install_github('slidifyLibraries', 'ramnathv')
install_github('ramnathv/slidifyLibraries', 'ramnathv')
install_github('ramnathv/slidifyLibraries', 'ramnathv',force = TRUE)
library(slidify)
slidify("index.Rmd")
getwd()
publish(title = 'My first App3', 'index.html', host = 'rpubs')
